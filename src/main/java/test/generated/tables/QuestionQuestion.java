/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Gennydb;
import test.generated.Indexes;
import test.generated.Keys;
import test.generated.tables.records.QuestionQuestionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionQuestion extends TableImpl<QuestionQuestionRecord> {

    private static final long serialVersionUID = 1603851984;

    /**
     * The reference instance of <code>gennydb.question_question</code>
     */
    public static final QuestionQuestion QUESTION_QUESTION = new QuestionQuestion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionQuestionRecord> getRecordType() {
        return QuestionQuestionRecord.class;
    }

    /**
     * The column <code>gennydb.question_question.sourceCode</code>.
     */
    public final TableField<QuestionQuestionRecord, String> SOURCECODE = createField("sourceCode", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.question_question.targetCode</code>.
     */
    public final TableField<QuestionQuestionRecord, String> TARGETCODE = createField("targetCode", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.question_question.created</code>.
     */
    public final TableField<QuestionQuestionRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.question_question.mandatory</code>.
     */
    public final TableField<QuestionQuestionRecord, Boolean> MANDATORY = createField("mandatory", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.question_question.oneshot</code>.
     */
    public final TableField<QuestionQuestionRecord, Boolean> ONESHOT = createField("oneshot", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.question_question.updated</code>.
     */
    public final TableField<QuestionQuestionRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.question_question.version</code>.
     */
    public final TableField<QuestionQuestionRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>gennydb.question_question.weight</code>.
     */
    public final TableField<QuestionQuestionRecord, Double> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>gennydb.question_question.SOURCE_ID</code>.
     */
    public final TableField<QuestionQuestionRecord, Long> SOURCE_ID = createField("SOURCE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>gennydb.question_question</code> table reference
     */
    public QuestionQuestion() {
        this(DSL.name("question_question"), null);
    }

    /**
     * Create an aliased <code>gennydb.question_question</code> table reference
     */
    public QuestionQuestion(String alias) {
        this(DSL.name(alias), QUESTION_QUESTION);
    }

    /**
     * Create an aliased <code>gennydb.question_question</code> table reference
     */
    public QuestionQuestion(Name alias) {
        this(alias, QUESTION_QUESTION);
    }

    private QuestionQuestion(Name alias, Table<QuestionQuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionQuestion(Name alias, Table<QuestionQuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuestionQuestion(Table<O> child, ForeignKey<O, QuestionQuestionRecord> key) {
        super(child, key, QUESTION_QUESTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gennydb.GENNYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTION_QUESTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestionQuestionRecord> getPrimaryKey() {
        return Keys.KEY_QUESTION_QUESTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestionQuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionQuestionRecord>>asList(Keys.KEY_QUESTION_QUESTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QuestionQuestionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuestionQuestionRecord, ?>>asList(Keys.FK9NEX8VYNU3G1W30V78HE4KPWD);
    }

    public Question question() {
        return new Question(this, Keys.FK9NEX8VYNU3G1W30V78HE4KPWD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionQuestion as(String alias) {
        return new QuestionQuestion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionQuestion as(Name alias) {
        return new QuestionQuestion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionQuestion rename(String name) {
        return new QuestionQuestion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionQuestion rename(Name name) {
        return new QuestionQuestion(name, null);
    }
}
