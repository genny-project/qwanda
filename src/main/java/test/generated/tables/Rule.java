/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Gennydb;
import test.generated.Indexes;
import test.generated.Keys;
import test.generated.tables.records.RuleRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rule extends TableImpl<RuleRecord> {

    private static final long serialVersionUID = 762234189;

    /**
     * The reference instance of <code>gennydb.rule</code>
     */
    public static final Rule RULE = new Rule();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RuleRecord> getRecordType() {
        return RuleRecord.class;
    }

    /**
     * The column <code>gennydb.rule.dtype</code>.
     */
    public final TableField<RuleRecord, String> DTYPE = createField("dtype", org.jooq.impl.SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>gennydb.rule.id</code>.
     */
    public final TableField<RuleRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>gennydb.rule.created</code>.
     */
    public final TableField<RuleRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.rule.name</code>.
     */
    public final TableField<RuleRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.rule.realm</code>.
     */
    public final TableField<RuleRecord, String> REALM = createField("realm", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.rule.updated</code>.
     */
    public final TableField<RuleRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.rule.code</code>.
     */
    public final TableField<RuleRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.rule.rule</code>.
     */
    public final TableField<RuleRecord, String> RULE_ = createField("rule", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>gennydb.rule</code> table reference
     */
    public Rule() {
        this(DSL.name("rule"), null);
    }

    /**
     * Create an aliased <code>gennydb.rule</code> table reference
     */
    public Rule(String alias) {
        this(DSL.name(alias), RULE);
    }

    /**
     * Create an aliased <code>gennydb.rule</code> table reference
     */
    public Rule(Name alias) {
        this(alias, RULE);
    }

    private Rule(Name alias, Table<RuleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rule(Name alias, Table<RuleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rule(Table<O> child, ForeignKey<O, RuleRecord> key) {
        super(child, key, RULE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gennydb.GENNYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RULE_PRIMARY, Indexes.RULE_UKJTUMKUXYGWBGSUGGJL85SIP5X, Indexes.RULE_UK_JTUMKUXYGWBGSUGGJL85SIP5X);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RuleRecord, Long> getIdentity() {
        return Keys.IDENTITY_RULE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RuleRecord> getPrimaryKey() {
        return Keys.KEY_RULE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RuleRecord>> getKeys() {
        return Arrays.<UniqueKey<RuleRecord>>asList(Keys.KEY_RULE_PRIMARY, Keys.KEY_RULE_UKJTUMKUXYGWBGSUGGJL85SIP5X, Keys.KEY_RULE_UK_JTUMKUXYGWBGSUGGJL85SIP5X);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rule as(String alias) {
        return new Rule(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rule as(Name alias) {
        return new Rule(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rule rename(String name) {
        return new Rule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rule rename(Name name) {
        return new Rule(name, null);
    }
}
