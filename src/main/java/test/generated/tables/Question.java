/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Gennydb;
import test.generated.Indexes;
import test.generated.Keys;
import test.generated.tables.records.QuestionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Question extends TableImpl<QuestionRecord> {

    private static final long serialVersionUID = -883446321;

    /**
     * The reference instance of <code>gennydb.question</code>
     */
    public static final Question QUESTION = new Question();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionRecord> getRecordType() {
        return QuestionRecord.class;
    }

    /**
     * The column <code>gennydb.question.id</code>.
     */
    public final TableField<QuestionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>gennydb.question.created</code>.
     */
    public final TableField<QuestionRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.question.name</code>.
     */
    public final TableField<QuestionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.question.realm</code>.
     */
    public final TableField<QuestionRecord, String> REALM = createField("realm", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.question.updated</code>.
     */
    public final TableField<QuestionRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.question.code</code>.
     */
    public final TableField<QuestionRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.question.attributeCode</code>.
     */
    public final TableField<QuestionRecord, String> ATTRIBUTECODE = createField("attributeCode", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.question.html</code>.
     */
    public final TableField<QuestionRecord, String> HTML = createField("html", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>gennydb.question.mandatory</code>.
     */
    public final TableField<QuestionRecord, Boolean> MANDATORY = createField("mandatory", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.question.oneshot</code>.
     */
    public final TableField<QuestionRecord, Boolean> ONESHOT = createField("oneshot", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.question.attribute_id</code>.
     */
    public final TableField<QuestionRecord, Long> ATTRIBUTE_ID = createField("attribute_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>gennydb.question</code> table reference
     */
    public Question() {
        this(DSL.name("question"), null);
    }

    /**
     * Create an aliased <code>gennydb.question</code> table reference
     */
    public Question(String alias) {
        this(DSL.name(alias), QUESTION);
    }

    /**
     * Create an aliased <code>gennydb.question</code> table reference
     */
    public Question(Name alias) {
        this(alias, QUESTION);
    }

    private Question(Name alias, Table<QuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Question(Name alias, Table<QuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Question(Table<O> child, ForeignKey<O, QuestionRecord> key) {
        super(child, key, QUESTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gennydb.GENNYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTION_FKC8891U9MG0DOEMNWFXOV4E1W1, Indexes.QUESTION_PRIMARY, Indexes.QUESTION_UKJYULUDYQFHB5B2AQE4D18WCBJ, Indexes.QUESTION_UK_JYULUDYQFHB5B2AQE4D18WCBJ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuestionRecord, Long> getIdentity() {
        return Keys.IDENTITY_QUESTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestionRecord> getPrimaryKey() {
        return Keys.KEY_QUESTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionRecord>>asList(Keys.KEY_QUESTION_PRIMARY, Keys.KEY_QUESTION_UKJYULUDYQFHB5B2AQE4D18WCBJ, Keys.KEY_QUESTION_UK_JYULUDYQFHB5B2AQE4D18WCBJ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QuestionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuestionRecord, ?>>asList(Keys.FKC8891U9MG0DOEMNWFXOV4E1W1);
    }

    public Attribute attribute() {
        return new Attribute(this, Keys.FKC8891U9MG0DOEMNWFXOV4E1W1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Question as(String alias) {
        return new Question(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Question as(Name alias) {
        return new Question(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(String name) {
        return new Question(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(Name name) {
        return new Question(name, null);
    }
}
