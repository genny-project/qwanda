/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Gennydb;
import test.generated.Indexes;
import test.generated.Keys;
import test.generated.tables.records.BaseentityBaseentityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BaseentityBaseentity extends TableImpl<BaseentityBaseentityRecord> {

    private static final long serialVersionUID = 553392029;

    /**
     * The reference instance of <code>gennydb.baseentity_baseentity</code>
     */
    public static final BaseentityBaseentity BASEENTITY_BASEENTITY = new BaseentityBaseentity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BaseentityBaseentityRecord> getRecordType() {
        return BaseentityBaseentityRecord.class;
    }

    /**
     * The column <code>gennydb.baseentity_baseentity.targetCode</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> TARGETCODE = createField("targetCode", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.created</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.LINK_CODE</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> LINK_CODE = createField("LINK_CODE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.childColor</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> CHILDCOLOR = createField("childColor", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.linkValue</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> LINKVALUE = createField("linkValue", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.parentColor</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> PARENTCOLOR = createField("parentColor", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.RULE</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> RULE = createField("RULE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.SOURCE_CODE</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> SOURCE_CODE = createField("SOURCE_CODE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.TARGET_CODE</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> TARGET_CODE = createField("TARGET_CODE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.LINK_WEIGHT</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Double> LINK_WEIGHT = createField("LINK_WEIGHT", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.updated</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueBoolean</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Boolean> VALUEBOOLEAN = createField("valueBoolean", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueDate</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Date> VALUEDATE = createField("valueDate", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueDateTime</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Timestamp> VALUEDATETIME = createField("valueDateTime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueDouble</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Double> VALUEDOUBLE = createField("valueDouble", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueInteger</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Integer> VALUEINTEGER = createField("valueInteger", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueLong</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Long> VALUELONG = createField("valueLong", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.money</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> MONEY = createField("money", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueString</code>.
     */
    public final TableField<BaseentityBaseentityRecord, String> VALUESTRING = createField("valueString", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.valueTime</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Time> VALUETIME = createField("valueTime", org.jooq.impl.SQLDataType.TIME, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.version</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.weight</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Double> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.attribute_id</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Long> ATTRIBUTE_ID = createField("attribute_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>gennydb.baseentity_baseentity.SOURCE_ID</code>.
     */
    public final TableField<BaseentityBaseentityRecord, Long> SOURCE_ID = createField("SOURCE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>gennydb.baseentity_baseentity</code> table reference
     */
    public BaseentityBaseentity() {
        this(DSL.name("baseentity_baseentity"), null);
    }

    /**
     * Create an aliased <code>gennydb.baseentity_baseentity</code> table reference
     */
    public BaseentityBaseentity(String alias) {
        this(DSL.name(alias), BASEENTITY_BASEENTITY);
    }

    /**
     * Create an aliased <code>gennydb.baseentity_baseentity</code> table reference
     */
    public BaseentityBaseentity(Name alias) {
        this(alias, BASEENTITY_BASEENTITY);
    }

    private BaseentityBaseentity(Name alias, Table<BaseentityBaseentityRecord> aliased) {
        this(alias, aliased, null);
    }

    private BaseentityBaseentity(Name alias, Table<BaseentityBaseentityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> BaseentityBaseentity(Table<O> child, ForeignKey<O, BaseentityBaseentityRecord> key) {
        super(child, key, BASEENTITY_BASEENTITY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gennydb.GENNYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BASEENTITY_BASEENTITY_FK5WX1AVQNHBIGUV2X4A2350HKJ, Indexes.BASEENTITY_BASEENTITY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BaseentityBaseentityRecord> getPrimaryKey() {
        return Keys.KEY_BASEENTITY_BASEENTITY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BaseentityBaseentityRecord>> getKeys() {
        return Arrays.<UniqueKey<BaseentityBaseentityRecord>>asList(Keys.KEY_BASEENTITY_BASEENTITY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BaseentityBaseentityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BaseentityBaseentityRecord, ?>>asList(Keys.FKGSPD8IJKXTSN0ROH902VVPQLC, Keys.FK5WX1AVQNHBIGUV2X4A2350HKJ);
    }

    public Attribute attribute() {
        return new Attribute(this, Keys.FKGSPD8IJKXTSN0ROH902VVPQLC);
    }

    public Baseentity baseentity() {
        return new Baseentity(this, Keys.FK5WX1AVQNHBIGUV2X4A2350HKJ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BaseentityBaseentity as(String alias) {
        return new BaseentityBaseentity(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BaseentityBaseentity as(Name alias) {
        return new BaseentityBaseentity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BaseentityBaseentity rename(String name) {
        return new BaseentityBaseentity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BaseentityBaseentity rename(Name name) {
        return new BaseentityBaseentity(name, null);
    }
}
