/*
 * This file is generated by jOOQ.
 */
package test.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import test.generated.Gennydb;
import test.generated.Indexes;
import test.generated.Keys;
import test.generated.tables.records.AskRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ask extends TableImpl<AskRecord> {

    private static final long serialVersionUID = 155772340;

    /**
     * The reference instance of <code>gennydb.ask</code>
     */
    public static final Ask ASK = new Ask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AskRecord> getRecordType() {
        return AskRecord.class;
    }

    /**
     * The column <code>gennydb.ask.id</code>.
     */
    public final TableField<AskRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>gennydb.ask.created</code>.
     */
    public final TableField<AskRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.ask.name</code>.
     */
    public final TableField<AskRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.ask.realm</code>.
     */
    public final TableField<AskRecord, String> REALM = createField("realm", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>gennydb.ask.updated</code>.
     */
    public final TableField<AskRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gennydb.ask.attributeCode</code>.
     */
    public final TableField<AskRecord, String> ATTRIBUTECODE = createField("attributeCode", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.ask.disabled</code>.
     */
    public final TableField<AskRecord, Boolean> DISABLED = createField("disabled", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.ask.hidden</code>.
     */
    public final TableField<AskRecord, Boolean> HIDDEN = createField("hidden", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.ask.mandatory</code>.
     */
    public final TableField<AskRecord, Boolean> MANDATORY = createField("mandatory", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.ask.oneshot</code>.
     */
    public final TableField<AskRecord, Boolean> ONESHOT = createField("oneshot", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>gennydb.ask.parentId</code>.
     */
    public final TableField<AskRecord, Long> PARENTID = createField("parentId", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>gennydb.ask.questionCode</code>.
     */
    public final TableField<AskRecord, String> QUESTIONCODE = createField("questionCode", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.ask.sourceCode</code>.
     */
    public final TableField<AskRecord, String> SOURCECODE = createField("sourceCode", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.ask.targetCode</code>.
     */
    public final TableField<AskRecord, String> TARGETCODE = createField("targetCode", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>gennydb.ask.weight</code>.
     */
    public final TableField<AskRecord, Double> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>gennydb.ask.question_id</code>.
     */
    public final TableField<AskRecord, Long> QUESTION_ID = createField("question_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>gennydb.ask</code> table reference
     */
    public Ask() {
        this(DSL.name("ask"), null);
    }

    /**
     * Create an aliased <code>gennydb.ask</code> table reference
     */
    public Ask(String alias) {
        this(DSL.name(alias), ASK);
    }

    /**
     * Create an aliased <code>gennydb.ask</code> table reference
     */
    public Ask(Name alias) {
        this(alias, ASK);
    }

    private Ask(Name alias, Table<AskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ask(Name alias, Table<AskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Ask(Table<O> child, ForeignKey<O, AskRecord> key) {
        super(child, key, ASK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gennydb.GENNYDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASK_FK3GB9GHT32CV27AJQS6YTICBMI, Indexes.ASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AskRecord, Long> getIdentity() {
        return Keys.IDENTITY_ASK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AskRecord> getPrimaryKey() {
        return Keys.KEY_ASK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AskRecord>> getKeys() {
        return Arrays.<UniqueKey<AskRecord>>asList(Keys.KEY_ASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AskRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AskRecord, ?>>asList(Keys.FK3GB9GHT32CV27AJQS6YTICBMI);
    }

    public Question question() {
        return new Question(this, Keys.FK3GB9GHT32CV27AJQS6YTICBMI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ask as(String alias) {
        return new Ask(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ask as(Name alias) {
        return new Ask(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ask rename(String name) {
        return new Ask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ask rename(Name name) {
        return new Ask(name, null);
    }
}
